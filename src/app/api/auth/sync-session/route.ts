// src/app/api/auth/sync-session/route.ts
import { NextResponse } from "next/server"
import { auth } from "@/lib/auth/auth.config"

// CrÃ©ons un cache pour Ã©viter les appels multiples
const processedRequests = new Set();

export async function POST(req: Request) {
  try {
    const { searchParams } = new URL(req.url)
    const userId = searchParams.get('userId')
    const requestId = searchParams.get('requestId') || crypto.randomUUID();
    
    // VÃ©rifier si cette requÃªte a dÃ©jÃ  Ã©tÃ© traitÃ©e rÃ©cemment
    if (processedRequests.has(requestId)) {
      console.log(`ðŸŸ¨ [SYNC:${requestId}] RequÃªte dÃ©jÃ  traitÃ©e, ignorÃ©e`);
      return NextResponse.json({ 
        success: true,
        message: "DÃ©jÃ  traitÃ©",
        cached: true
      })
    }
    
    // Ajouter l'ID au cache
    processedRequests.add(requestId);
    
    // Supprimer l'ID aprÃ¨s un dÃ©lai
    setTimeout(() => {
      processedRequests.delete(requestId);
    }, 30000); // 30 secondes
    
    console.log(`ðŸŸ¦ [SYNC:${requestId}] DÃ©but synchronisation session pour userId: ${userId || 'non spÃ©cifiÃ©'}`);

    // Forcer la mise Ã  jour de la session en invalidant la session actuelle
    const session = await auth();
    
    console.log(`ðŸŸ¦ [SYNC:${requestId}] Fin synchronisation session`);
    
    // Retourner un succÃ¨s
    return NextResponse.json({ 
      success: true,
      message: "Session synchronisÃ©e",
      sessionUpdated: !!session,
      requestId
    }, {
      headers: {
        'Cache-Control': 'no-store, max-age=0',
      }
    })
  } catch (error) {
    console.error(`ðŸ”´ [SYNC] Erreur:`, error)
    return NextResponse.json(
      { error: "Une erreur est survenue" },
      { status: 500 }
    )
  }
}